{"componentChunkName":"component---src-templates-post-js","path":"/posts/understanding-typescripts-exclude","webpackCompilationHash":"2b946507588b7ce652ad","result":{"data":{"markdownRemark":{"html":"<p>I recently started to do more TypeScript. I have plenty of previous experiences\nwith typed languages but there were still some things in TypeScript that I didn't\nreally feel comfortable with at first.</p>\n<h3>That Weird Exclude Type</h3>\n<p>While reading release notes for TypeScript 2.8 I stumbled across <em>Omit</em>. Not\nknowing what it was I set out to understand it. However, the problem grew since\nI found that <em>Omit</em> was defined as a combination of <em>Pick</em> and <em>Exclude</em>. I just\ncouldn't for the life of me figure out what <em>Exclude</em> did.</p>\n<p>Most of the articles I found about <em>Exclude</em> would show an example of how it was\nused in conjunction with another type. It felt like they sort of assumed that\nthe reader already knew what <em>Exclude</em> did.</p>\n<h3>Lets Start With Union Types</h3>\n<p>So TypeScript has this awesome feature called <em>union types</em>. I think it is\neasier to show an example of a <em>union type</em> rather than explaining it in text.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Language <span class=\"token operator\">=</span> <span class=\"token string\">\"swedish\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"danish\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"english\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"french\"</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token keyword\">const</span> firstLanguage<span class=\"token punctuation\">:</span> Language <span class=\"token operator\">=</span> <span class=\"token string\">\"swedish\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> secondLanguage<span class=\"token punctuation\">:</span> Language <span class=\"token operator\">=</span> <span class=\"token string\">\"english\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Will not compile</span>\n<span class=\"token keyword\">const</span> thirdLanguage <span class=\"token operator\">=</span> <span class=\"token string\">\"meowing\"</span></code></pre></div>\n<p>So in the example above we create a type called <em>Language</em>. A variable of type\n<em>Language</em> can now only be one of the languages we defined in the type. In this\ncase <em>meowing</em> is not an acceptable language and therefore the program above\nwill not compile.</p>\n<h3>So What Is This Exclude Thing?</h3>\n<p>This is when <em>Exclude</em> comes in. <em>Exclude</em> takes two <em>union types</em> and, sort of,\nsubtracts the values in the second <em>union type</em> from the first <em>union type</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Language <span class=\"token operator\">=</span> <span class=\"token string\">\"swedish\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"danish\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"english\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"french\"</span><span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">type</span> NordicLanguage <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span>Language<span class=\"token punctuation\">,</span> <span class=\"token string\">\"english\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"french\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> firstLanguage<span class=\"token punctuation\">:</span> NordicLanguage <span class=\"token operator\">=</span> <span class=\"token string\">\"swedish\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// This will not compile</span>\n<span class=\"token keyword\">const</span> secondLanguage<span class=\"token punctuation\">:</span> NordicLanguage <span class=\"token operator\">=</span> <span class=\"token string\">\"english\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So in the above example we create another type called <em>NordicLanguage</em>. This\ntype can take on all the same values as <em>Language</em> except for the excluded values\n<em>english</em> and <em>french</em>. This is more or less the same as writing.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Language <span class=\"token operator\">=</span> <span class=\"token string\">\"swedish\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"danish\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"english\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"french\"</span><span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">type</span> NordicLanguage <span class=\"token operator\">=</span> <span class=\"token string\">\"swedish\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"danish\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>A Cool Use Case</h3>\n<p>So I recently had a problem where I had an object that contained multiple keys of\nthe same type. I also wanted to store which keys was currently\nactive/selected.</p>\n<p>As it turned out; this perfect case for <em>Exclude</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> AvailableArea <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> Map<span class=\"token punctuation\">,</span> <span class=\"token string\">'selectedArea'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> Climate <span class=\"token operator\">=</span> <span class=\"token string\">'grass'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'snow'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'sand'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'water'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Area</span> <span class=\"token punctuation\">{</span>\n  climate<span class=\"token punctuation\">:</span> Climate<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Map</span> <span class=\"token punctuation\">{</span>\n  selectedArea<span class=\"token punctuation\">:</span> AvailableArea<span class=\"token punctuation\">;</span>\n  north<span class=\"token punctuation\">:</span> Area<span class=\"token punctuation\">;</span>\n  south<span class=\"token punctuation\">:</span> Area<span class=\"token punctuation\">;</span>\n  west<span class=\"token punctuation\">:</span> Area<span class=\"token punctuation\">;</span>\n  east<span class=\"token punctuation\">:</span> Area<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first thing that we need to understand if what <em>keyof</em> means.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// Same as: type keys = \"selectedArea\" | \"north\" | \"south\" | \"west\" | \"east\";</span>\n<span class=\"token keyword\">type</span> keys <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> Map<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Map</span> <span class=\"token punctuation\">{</span>\n  selectedArea<span class=\"token punctuation\">:</span> AvailableArea<span class=\"token punctuation\">;</span>\n  north<span class=\"token punctuation\">:</span> Area<span class=\"token punctuation\">;</span>\n  south<span class=\"token punctuation\">:</span> Area<span class=\"token punctuation\">;</span>\n  west<span class=\"token punctuation\">:</span> Area<span class=\"token punctuation\">;</span>\n  east<span class=\"token punctuation\">:</span> Area<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So now that we have that down the question is: Do we really want <em>selectedArea</em>\nto be able to refer to it self? In this case the answer was no. If I create a\n<em>union type</em> with the key names hard coded, what if I start adding more areas\nlike <em>southWest</em>? These questions lead me to the conclusion that probably it is\nbest if I use <em>Exclude</em> here.</p>\n<p>We know that <em>keyof</em> returns a <em>union type</em> where the values can be any of the\nkeys in the object. All we need to do now is to \"exclude\" <em>selectedArea</em> and we\nshould be left with exactly what we want!</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> AvailableArea <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> Map<span class=\"token punctuation\">,</span> <span class=\"token string\">'selectedArea'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This gives me the possibility to include more areas in the future and still keep\ntype safety throughout my application.</p>\n<h3>Closing Thoughts</h3>\n<p>Hopefully someone found this useful in some way. Next time I might cover <em>Pick</em>\nbut there are plenty of tutorials out there for that and once I understood\n<em>Exclude</em> I found that <em>Pick</em> wasn't that hard to grasp.</p>","frontmatter":{"path":"/posts/understanding-typescripts-exclude","title":"Understanding TypeScripts Exclude"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}