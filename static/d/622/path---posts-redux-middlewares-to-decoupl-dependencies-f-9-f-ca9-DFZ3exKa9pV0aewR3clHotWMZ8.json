{"data":{"markdownRemark":{"html":"<p><img src=\"https://cdn-images-1.medium.com/max/7220/1*BpaqVMW2RjQAg9cFHcX1pw.png\"></p>\n<p>I have a huge interest in how to write testable code. I also got sold quite recently on React and Redux. Coming from an Android background I got used to managing dependencies with Dagger. I wont go in to much details about what Dagger actually provides but it is a framework for Dependency Injection. After doing React for a while i realized that frameworks such as Dagger aren’t really needed when doing React but Dependency Injection is still a great pattern that I think is heavily under used.</p>\n<p>In order to get everyone up to speed I thought it might be good to cover what Dependency Injection is.</p>\n<p>Say that you have a class that is in charge of user registration.</p>\n <iframe src=\"https://medium.com/media/e541c1499f53f494d513519a7d6ec596\" frameborder=0></iframe>\n<p>This class looks okay but in order to test this you need to do all kinds of monkey patching for the imports.</p>\n<p>We can do better than that. Lets instead provide the dependencies to the class and move the responsibility to the caller.</p>\n <iframe src=\"https://medium.com/media/4cca4478db33a427ce7bcb45e172095a\" frameborder=0></iframe>\n<p>This class is now somewhat easy to test. All we need to do is to pass it an object with a fake insert property and an object with a fake sendEmailTo property.</p>\n<p>A question now arises: Who is in charge of passing all these dependencies to all of these classes? That question is hard to give a good answer to but generally speaking it should be the “main” part of your code. So where is “main”? Well “main” is the entry point to the application. When talking Redux I would say that it is the place where you create your store.</p>\n<p>So how do we put this together then? And what is up with the classes? I thought all the cool kids do functional programming now. Well we still have this in functional programming too.</p>\n<p>Do we even need the constructor? The previous example might as well be expressed as:</p>\n <iframe src=\"https://medium.com/media/3f0fe8f2765baf2140e169233ef3a303\" frameborder=0></iframe>\n<p>But this will be tedious if you have to pass down the database to every call to registerUser . So we can do even better than that, lets use currying:</p>\n <iframe src=\"https://medium.com/media/b91c79ffb4fd9fb85d9dfa68bbaab6e8\" frameborder=0></iframe>\n<p>with currying we can, instead of passing down the dependencies, pass down the curried function registerUser . The function holds a reference to someDatabase and someEmailSender without the caller having to know anything about the database or the emailSender .</p>\n<p>So where does Redux come in? I would like to turn my attention to Redux middlewares. <a href=\"undefined\">Jacob Parker</a> has a great article called <a href=\"https://medium.com/@jacobp100/you-arent-using-redux-middleware-enough-94ffe991e6\">You Aren’t Using Redux Middleware Enough</a>. I highly recommend reading that one since it completely changed the way that I think about redux.</p>\n<p>He gave an example where he encapsulates an API using a middleware and it was amazing. I will show an example of how this method can be used to encapsulate other things. Specifically an IndexedDB store (The code will be in typescript but it could just as easily be written in javascript too).</p>\n<p>I wrote together a IndexedDB service for storing TODOs. I chose TODOs because I have no imagination:</p>\n <iframe src=\"https://medium.com/media/0a56a508ccb1a4fb02fb94e2a18bd050\" frameborder=0></iframe>\n<p>I won’t go in to much detail about how the service works. I would recommend that you have a look at <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\">this MDN article</a> to learn more about IndexedDB.</p>\n<p>The service has two public methods (as defined by the interface TodoService). One is for subscribing to changes. and one is for adding a new TODO to the database. When the service is constructed it fetches all the previous TODOs and notifies all of its current subscribers.</p>\n<p>Now lets take a look at the Redux part. I follow the <a href=\"https://github.com/erikras/ducks-modular-redux\">ducks structure</a> and this is what the Redux stuff looks like:</p>\n <iframe src=\"https://medium.com/media/c043d9cf8b30d68e2f4dfc2d156351be\" frameborder=0></iframe>\n<p>I think that one of the benefits of using middlewares is that we get rid of async actions and instead end up with two separate reducers. One is in the middleware and that one only handle the side effects. The other one is the “real” reducer that only updates the state based on the actions. Another thing that is note worthy is that the middleware has an additional parameter in addition to the usual store ,next and action . An object that satisfies the interface TodoService is also a dependency.</p>\n<p>So lets wire this stuff together in index.ts.</p>\n <iframe src=\"https://medium.com/media/768d2f009b3af3617034ea2e605764dc\" frameborder=0></iframe>\n<p>The snippet above is what I referred to in the beginning of this article as the “main” part of the code. This is the entry point to the store. Here we import the IndexedDBTodoService and instantiate it. We then instantiate the store and add the middleware to it.</p>\n<p>All actions are now easily testable and so is the reducer. We could easily replace the IndexedDBTodoService with any other implementation we want, as long as it satisfies the TodoService interface. The middleware it self can also be tested by providing a mocked TodoService .</p>\n<p>So now we are done! I hope that my rambling has made someone interested in trying this out. This is my first ever article on Medium but it is hopefully not my last.</p>","frontmatter":{"date":"July 12, 2017","path":"/posts/redux-middlewares-to-decoupl-dependencies","title":"Redux Middlewares to Decouple Dependencies"}}},"pageContext":{}}