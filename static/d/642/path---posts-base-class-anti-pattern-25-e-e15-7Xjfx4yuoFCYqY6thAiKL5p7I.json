{"data":{"markdownRemark":{"html":"<p>As a consultant I get to see a lot of code bases and on Android, by far, the most common\nanti-pattern that I find is what I call the BaseClass anti-pattern.</p>\n<p>In this article I will explain what it is, why it is bad and why it is so seductive.</p>\n<h2>What is it?</h2>\n<p>So what is the BaseClass anti-pattern and how do I detect it?</p>\n<ol>\n<li>Start out by opening the android project.</li>\n<li>Locate an activity or a fragment class.</li>\n<li>Does it extend something called <code class=\"language-text\">BaseActivity</code> or <code class=\"language-text\">BaseFragment</code>?</li>\n</ol>\n<p>If the answer to #3 is yes then you my friend has fallen victim to the BaseClass anti-pattern.\nIf you open the <code class=\"language-text\">BaseActivity</code> or the <code class=\"language-text\">BaseFragment</code> class and that class contains more than\n50 lines of code then you're probably in deep trouble.</p>\n<h2>So why is this bad?</h2>\n<p>I will answer why it is bad by asking a question. What is the responsibility of the\n<code class=\"language-text\">BaseActivity</code>? Except for being an <code class=\"language-text\">Activity</code> what does the class name tell you?\n<strong>NOTHING</strong> right...</p>\n<p>So the naming is bad, lets give it a better name! Well if you open the class\nchances are that you will find something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AppCompatActivity</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Inject</span>\n  Analytics analytics<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    AppInjector<span class=\"token punctuation\">.</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    analytics<span class=\"token punctuation\">.</span><span class=\"token function\">trackScreen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now try to come up with a name for this class, what is it responsible for?\n<code class=\"language-text\">ActivityWithInjectionAndAnalytics</code> is not a very nice name and the <em>\"And\"</em> part indicates\nthat the class has more than one responsibility and therefore is in violation\nof the <em>single responsibility principle</em>. So people resort to calling it things like\n<code class=\"language-text\">BaseActivity</code> and this creates a very <em>non-explicit</em> abstraction. Extending <code class=\"language-text\">BaseActivity</code> tells\nyou nothing about what code you are bringing to your newly created activity.</p>\n<p>So now you might think to your self that \"This doesn't look too bad\" and i would admit\nthat no, two methods are not the end of the world. However this is usually not where the\nstory ends. I have found the size of such a <code class=\"language-text\">BaseClass</code> usually has a linear correlation with time.\nIt starts to accumulate things like creating a <code class=\"language-text\">ViewModel</code> / <code class=\"language-text\">Presenter</code>, adding utility\nfunctions that depend on a <code class=\"language-text\">Context</code> and sometimes even implementing business logic.</p>\n<p>As time goes on, people start extending <code class=\"language-text\">BaseActivity</code> almost as a ritual rather than\nout of a need for some functionality that <code class=\"language-text\">BaseActivity</code> provides. Maybe you only care about\none of the 150 methods overridden in the <code class=\"language-text\">BaseActivity</code>. Once you get to that\npoint, what you have effectively done is creating a <em>static</em> dependency on code that\nyou in no way shape or form need to depend on. You run code that you don't need to run.\nMaybe the fact that the code runs doesn't hurt you (right now) but it will still run and I absolutely\npromise you that one day, someone (maybe you) wil modify some of the code in the base class\nto fit the need of a completely unrelated class and the class that you wrote in the first place\nwill have a <code class=\"language-text\">RuntimeException</code>. You or your colleague will be blamed, get fired and die alone.</p>\n<h2>So why use a BaseClass?</h2>\n<p>I can only guess but as someone who has created plenty of <code class=\"language-text\">BaseClass</code>es in the past\nI can say that it is mostly due to two things. The main reason why I did it was because\nit was the easiest way of implementing DRY (Do not repeat yourself). And the second reason\nwas that Android specific classes aren't that suited for the\n<a href=\"https://en.wikipedia.org/wiki/Decorator_pattern\">decorator pattern</a>.</p>\n<p>You probably had some piece of code, like dependency injection, that you thought: \"Hey I inject\nall of my activities in <code class=\"language-text\">onCreate</code> that is duplicated code, lets get rid of that!\". So you create\nyour initial base class that handles the injection and start hacking away. Later on you find some\nother piece of code that you run in a lot of the activities. For instance converting from <code class=\"language-text\">dp</code> to <code class=\"language-text\">px</code>.\nTo do this you need access to a <code class=\"language-text\">Context</code>. Since you learned in school that OOP is all about dat\ninheritance you just add a method to the <code class=\"language-text\">BaseClass</code> that does this. Of course what you should have\ndone is creating a static method in a different class:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Units</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">dpToPx</span><span class=\"token punctuation\">(</span>Context context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> dp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Resources resources <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getResources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> TypedValue<span class=\"token punctuation\">.</span><span class=\"token function\">applyDimension</span><span class=\"token punctuation\">(</span>\n        TypedValue<span class=\"token punctuation\">.</span>COMPLEX_UNIT_DIP<span class=\"token punctuation\">,</span>\n        dp<span class=\"token punctuation\">,</span>\n        resources<span class=\"token punctuation\">.</span><span class=\"token function\">getDisplayMetrics</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now any class that needs this can call it. There is simply no need to inherit any <code class=\"language-text\">BaseClass</code> so the\ncaller of the method can sleep safe knowing that nothing strange runs in <code class=\"language-text\">onStart</code>, <code class=\"language-text\">onCreate</code> or any of\nthe other callback methods of the <code class=\"language-text\">Activity</code> class.</p>\n<p>If you can't get by with using a static helper method then create a class that handles your use case and\ninstantiate it in the <code class=\"language-text\">Activity</code>. Better yet, inject it with your dependency injector of choice!</p>\n<p>But what if we need to run something that depends on the callback methods? Like subscribing to some\nobservable data and then unsubscribing later on? Well in this case i would still prefer to be explicit with\nthis, over being implicit with a <code class=\"language-text\">BaseClass</code>. Luckily we have even better options today with\n<a href=\"https://developer.android.com/topic/libraries/architecture/lifecycle\">LifecycleObserver</a>.</p>\n<h2>Conclusion</h2>\n<p>DO NOT CREATE A BASE CLASS FOR ALL OF YOUR ACTIVITIES AND FRAGMENTS!</p>\n<p>It creates implicit but strong coupling. It makes it very hard to get a full picture of what an class does.\nIt will grow and become a hot mess. There is probably a lot of code in the <code class=\"language-text\">BaseClass</code> that would be really\neasy to unit test had it been in it's own class. But the fact that it is in the <code class=\"language-text\">BaseClass</code> makes you unwilling\nor unable to test it.</p>","frontmatter":{"date":"Invalid date","path":"/posts/base-class-anti-pattern","title":"The BaseClass Anti-Pattern"}}},"pageContext":{}}