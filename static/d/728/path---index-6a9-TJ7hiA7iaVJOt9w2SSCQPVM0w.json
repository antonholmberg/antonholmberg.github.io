{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>This blog was made with <a href=\"https://www.gatsbyjs.org/\">Gatsby.js</a> over all it has\nbeen a blast to make it and the fact that I could reuse my react skills maded me\nfeel like i am in controll.</p>\n<p>There were however a quite a lot of things that took some time to sink in. So I\nthough it might be nice for me to post about the concepts that were hard for me\nto grasp.</p>\n<p>I started out this blog post thinking it would be more or less a step by step guide of\nhow the Blog was made. But to be fair there are a lot of these guides out there and most\nof them are brilliantly written. So if you are looking for a step by step guide I\nwould much rather refer you to those:</p>\n<ul>\n<li><a href=\"https://www.gatsbyjs.org/blog/2017-07-19-creating-a-blog-with-gatsby/\">Creating a Blog with Gatsby</a></li>\n<li><a href=\"https://www.gatsbyjs.org/tutorial/\">Gatsby Official Tutorial</a></li>\n</ul>\n<h3>Initial Starter Pack</h3>\n<p>So one of the tings I wish that I hade done differently was to start out with\nthe <em>hello world</em> starter pack instead of the default one.</p>\n<p>There are a lot of nice things in the default started pack like SEO, Manifest and\nall of that goodness. But before I understood how gatsby works, this\ninitial stuff became rather confusing.</p>\n<p>Therefore I strongly recommend anyone who wants to learn <a href=\"https://www.gatsbyjs.org/\">Gatsby.js</a>\nto initialize a project with:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gatsby new hello-world https://github.com/gatsbyjs/gatsby-starter-hello-world</code></pre></div>\n<p>This is also what they recommend in the official tutorial so maybe I should have read\nthat hehe.</p>\n<h3>What It Actually Does</h3>\n<p>So gatsby is a static page generator. This took some time for me to realize. I thought\nthat it was more or less like writing any other React app.</p>\n<p>We need to sort of separate the <em>build time</em> from <em>run time</em>. At <em>build time</em>\n<a href=\"https://www.gatsbyjs.org/\">Gatsby.js</a> pulls in data from different sources and generate\npages from that data. Examples of sources are:</p>\n<ul>\n<li><a href=\"https://www.gatsbyjs.org/packages/gatsby-source-filesystem/\">Filesystem</a></li>\n<li><a href=\"https://www.gatsbyjs.org/packages/gatsby-source-custom-api/\">Custom API</a></li>\n<li><a href=\"https://www.gatsbyjs.org/packages/@mosch/gatsby-source-github/\">Github</a></li>\n</ul>\n<p>There are many more of these <em>source</em> plugins but I would advice someone who is just starting out\nto go with the <a href=\"https://www.gatsbyjs.org/packages/gatsby-source-filesystem/\">filesystem</a>.\nThis is because it makes it is easier create a mental image of how <a href=\"https://www.gatsbyjs.org/\">Gatsby.js</a>\nworks. It is easy to understand that these local files are managed at <em>build time</em> and not at <em>run time</em>.\nThe thing that I didn't really understand at first was that even if the <em>source</em> was an API,\n<strong>the data was still fetched at <em>build time</em></strong>.</p>\n<h3>Pages</h3>\n<p>Okay so lets talk basics. Pages are the most basic elements in\n<a href=\"https://www.gatsbyjs.org/\">Gatsby.js</a>. When you create an app with the <em>hello world</em>\nstarter pack you will only have one page, the <em>index.js</em> page. This page it the one that the\nuser lands on. Another path will be added for each <em>page</em> that you add in the <em>pages</em> folder.</p>\n<p>Let say that I add an about page. <a href=\"https://www.gatsbyjs.org/\">Gatsby.js</a> will add a path for\n<em>/about</em>. You can now add a link from <em>/index</em> to <em>/about</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Link <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'gatsby'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Index</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token string\">\"/about\"</span><span class=\"token operator\">></span>About<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Index<span class=\"token punctuation\">;</span></code></pre></div>\n<h3>GraphQL</h3>\n<p>So before making this blog I had never really worked with GraphQL on a \"<em>real</em>\" project.\nI had played around with <a href=\"https://github.com/graphql/graphiql\">GraphiQL</a> but that was about\nall that I knew.</p>\n<p>As I mentioned Gatsby pulls data from your <em>sources</em> at <em>build time</em>. Once the data is fetched\nit exposes this data though GraphQL. I found that the easiest one to wrap my head around was\nonce again the <a href=\"https://www.gatsbyjs.org/packages/gatsby-source-filesystem/\">filesystem</a>. So\nI strongly recommend that you use that one and then play around with some queries in the\n<a href=\"https://github.com/graphql/graphiql\">GraphiQL</a>. You can access <a href=\"https://github.com/graphql/graphiql\">GraphiQL</a>\nat <a href=\"localhost:8000/___grapgql\">localhost:8000/___grapgql</a>.</p>\n<p>GraphQL queries can be used pretty much all over Gatsby and it is really really powerful.</p>\n<h3>Transformers</h3>\n<p>So gatsby has a multitude of <em>transformers</em>. What <em>transformers</em> do is to take the\ncontent that the <em>source</em> plugins load and transform them in some way.</p>\n<p>I use <a href=\"https://www.gatsbyjs.org/packages/gatsby-transformer-remark/\">remark</a>. It is\na tranformer for markdown (my choise when writing stuff). It takes any markdown available\nfrom the sources and then transforms it in to HTML to be displayed in the blog.</p>\n<h3>Generating Pages From the Sources</h3>\n<p>So it is quite easy to imagine how a file in the <em>pages</em> directory turns in to html but something\nthat took a while for me to understand was how the data got turned in to <em>pages</em>.</p>\n<p>The answer was that at <em>build time</em> Gatsby tries to call a function, defined in <em>gatsby-node.js</em>, called\n<em>createPages</em>. In this method you can query for data with GraphQL and then call <em>createPage</em> to create\nthe page.</p>\n<p>I won't go in to much details about how to write this method. If you want to know more I would recommend\nreading the official documentation <a href=\"https://www.gatsbyjs.org/tutorial/part-seven/\">here</a>.</p>\n<h3>What Finally Made It Click</h3>\n<p>Okay so the thing that finally made it click for me was to imagine that I was writing a <em>express</em> server\nwith server side rendering. The only difference is that all endpoints are pre-cached and stored in the\n<em>public</em> directory.</p>\n<p>So adding a file in the <em>pages</em> directory is the same as writing:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And the <em>gatsby-node.js</em> file is used to define endpoints that in a <em>express</em> app would be dynamic, like:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/posts/:postId'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Closing Thoughts</h3>\n<p>Gatsby is amazing! There are a lot of plugins and things that you can add. This can feel daunting at first\nbut most of these plugins are <em>nice</em> to have but in no way required. So starting out with the basic\n<em>hello world</em> starter kit and then adding plugins as you need is probably the best way to get started.</p>\n<p>I found that, for me, thinking of it as an <em>express</em> server made it click. Hopefully someone else can benefit\nfrom this mental model too.</p>","excerpt":"This blog was made with  Gatsby.js  over all it has\nbeen a blast to make it and the fact that I could reuse my react skills maded me\nfeel like i am in controll. There were however a quite a lot ofâ€¦","frontmatter":{"title":"How I Made This Blog","path":"/posts/how-i-made-this-blog"}}}]}},"pageContext":{}}